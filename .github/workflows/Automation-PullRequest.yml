# Workflow(Action) 名稱
name: Pull Reqeust Automation

# 觸發事件
on:
  # PR 事件
  pull_request:
    # PR - 開啟、重開、有新 Push Commit 時
    types: [opened, synchronize, reopened]

# Job 工作項目
# Job 會並發執行
jobs:
  # Job ID
  label-pr-by-file-count:
    # Job 名稱 (可省略，有設定在 Log 顯示比較好讀)
    name: Label PR by changes file count
    # Runner Label - 使用 GitHub Hosted Runner ubuntu-latest 來執行工作
    # 如果是 Private Repo 會計算用量，超過可能會產生費用
    runs-on: [self-hosted-zhgchgli]

    # 工作步驟
    # 工作步驟會照順序執行
    steps:
      # 步驟名稱
      - name: Get changed file count and apply label
        # 步驟 ID (可省略，後續若沒有 Step 要引用 Output 輸出則不需設定)
        id: get-changed-files-count-by-gh
        # 注入外部環境參數到執行階段
        env:
          # secrets.GITHUB_TOKEN 是 GitHub Actions 執行時自動產生的 Token，不需自行在 Secrets 設定，擁有一些 GitHub Repo API Scopes 權限
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Shell script
        # GitHub Hosted Runner 內建都有安裝好 gh cli，不需要安裝 Job 就能直接使用
        run: |
          # ${{ github }} 是 GitHub Actions 執行時會自動注入的變數參考，可以從中取得執行階段資訊
          
          # 取得 PR 編號:
          PR_NUMBER=${{ github.event.pull_request.number }}

          # 取得 Repo:
          REPO=${{ github.repository }}

          # 使用 GitHub API (gh cli) 取得 File changed 數量
          FILE_COUNT=$(gh pr view $PR_NUMBER --repo $REPO --json files --jq '.files | length')
          
          # Print Log
          echo "Changed file count: $FILE_COUNT"

          # Label 邏輯
          if [ "$FILE_COUNT" -lt 5 ]; then
            LABEL="XS"
          elif [ "$FILE_COUNT" -lt 10 ]; then
            LABEL="S"
          elif [ "$FILE_COUNT" -lt 30 ]; then
            LABEL="M"
          elif [ "$FILE_COUNT" -lt 80 ]; then
            LABEL="L"
          elif [ "$FILE_COUNT" -lt 200 ]; then
            LABEL="XL"
          else
            LABEL="XXL"
          fi

          # 使用 GitHub API (gh cli) 移除目前的 Size Label
          EXISTING_LABELS=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json labels --jq '.labels[].name')
          for EXISTING in $EXISTING_LABELS; do
            case "$EXISTING" in
              XS|S|M|L|XL|XXL)
                echo "🧹 Removing existing label: $EXISTING"
                gh pr edit "$PR_NUMBER" --repo "$REPO" --remove-label "$EXISTING"
                ;;
            esac
          done

          # (可選)如果 Label 不存在則建立
          if ! gh label list --repo "$REPO" | grep -q "^$LABEL"; then
            echo "🆕 Creating missing label: $LABEL"
            gh label create "$LABEL" --repo "$REPO" --description "Size label: $LABEL" --color "ededed"
          else
            echo "✅ Label '$LABEL' already exists"
          fi
          
          # 使用 GitHub API (gh cli) 標記上 Label
          gh pr edit $PR_NUMBER --repo $REPO --add-label "$LABEL"
  # ---------
  assign-self-if-no-assignee:
    name: Automatically assign to self if no assignee is specified
    # 因為是共用觸發事件，所以在 Job 上自己判斷，當是 Pull Request Opened(首次建立) 時才執行 Job 否則會 Skipped
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    
    # Runner Label - 使用 GitHub Hosted Runner ubuntu-latest 來執行工作
    # 如果是 Private Repo 會計算用量，超過可能會產生費用
    runs-on: [self-hosted-zhgchgli]

    steps:
      - name: Assign self if No Assignee
        # 使用 GitHub Script (JavaScript) 撰寫腳本 (Node.js 環境)
        # 相較上面直接用 Shell Script 寫起來更方便漂亮
        # 也不需要自行注入環境變數、GITHUB_TOKEN
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.pull_request; // 如果要連 Issue 一起支援可寫成 context.payload.issue || context.payload.pull_request
            const assignees = issue.assignees || [];
            const me = context.actor;

            if (assignees.length === 0) {
              // Assignee 設成自己
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                assignees: [me]
              });

              // 留言通知
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `🔧 No assignee was set, so I have assigned this to myself (@${me}).`
              });
            }
